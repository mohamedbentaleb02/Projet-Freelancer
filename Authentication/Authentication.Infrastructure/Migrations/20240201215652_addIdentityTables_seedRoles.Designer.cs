// <auto-generated />
using System;
using Freelance.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Freelance.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240201215652_addIdentityTables_seedRoles")]
    partial class addIdentityTables_seedRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Freelance.Domain.Entities.Competence", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nom");

                    b.HasKey("Id")
                        .HasName("PK__Competen__3213E83F8016AE91");

                    b.ToTable("Competence", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.CompetenceOffre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdCompetence")
                        .HasColumnType("int")
                        .HasColumnName("id_competence");

                    b.Property<int?>("IdOffre")
                        .HasColumnType("int")
                        .HasColumnName("id_Offre");

                    b.HasKey("Id")
                        .HasName("PK__Competen__3213E83F51A53AEB");

                    b.HasIndex("IdCompetence");

                    b.HasIndex("IdOffre");

                    b.ToTable("CompetenceOffre", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.ComptenceDmExpertise", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdCompetence")
                        .HasColumnType("int")
                        .HasColumnName("id_competence");

                    b.Property<int?>("IdDmexpertise")
                        .HasColumnType("int")
                        .HasColumnName("id_dmexpertise");

                    b.HasKey("Id")
                        .HasName("PK__Comptenc__3213E83F1B87D054");

                    b.HasIndex("IdCompetence");

                    b.HasIndex("IdDmexpertise");

                    b.ToTable("ComptenceDmExpertise", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Condidat", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("adresse");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("date_naissance");

                    b.Property<string>("Disponibilite")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("disponibilite");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("id_ville");

                    b.Property<string>("Mobilite")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mobilite");

                    b.Property<string>("Tele")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tele");

                    b.Property<string>("Titre")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titre");

                    b.HasKey("Id")
                        .HasName("PK__Condidat__3213E83F0E35DC80");

                    b.HasIndex("IdVille");

                    b.ToTable("Condidat", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.CondidatComp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("IdComp")
                        .HasColumnType("int")
                        .HasColumnName("id_comp");

                    b.Property<int?>("IdCond")
                        .HasColumnType("int")
                        .HasColumnName("id_cond");

                    b.Property<string>("Niveau")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("niveau");

                    b.HasKey("Id")
                        .HasName("PK__Condidat__3213E83FAF442B14");

                    b.HasIndex("IdComp");

                    b.HasIndex("IdCond");

                    b.ToTable("CondidatComp", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.ConsultaionProfil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateConsultation")
                        .HasColumnType("date")
                        .HasColumnName("date_consultation");

                    b.Property<int?>("IdCondidat")
                        .HasColumnType("int")
                        .HasColumnName("id_condidat");

                    b.Property<int?>("IdEntreprise")
                        .HasColumnType("int")
                        .HasColumnName("id_entreprise");

                    b.HasKey("Id")
                        .HasName("PK__Consulta__3213E83F93C2C409");

                    b.HasIndex("IdCondidat");

                    b.HasIndex("IdEntreprise");

                    b.ToTable("ConsultaionProfil", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.DomaineExpertise", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nom");

                    b.HasKey("Id")
                        .HasName("PK__DomaineE__3213E83FA948D570");

                    b.ToTable("DomaineExpertise", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("adresse");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("date")
                        .HasColumnName("date_creation");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("id_ville");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("logo");

                    b.Property<string>("RaisonSociale")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("raison_sociale");

                    b.HasKey("Id")
                        .HasName("PK__Entrepri__3213E83FBF39B25F");

                    b.HasIndex("IdVille");

                    b.ToTable("Entreprise", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("date")
                        .HasColumnName("date_debut");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("date")
                        .HasColumnName("date_fin");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description_");

                    b.Property<int?>("IdCondidat")
                        .HasColumnType("int")
                        .HasColumnName("id_condidat");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("id_ville");

                    b.Property<string>("Local")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("local_");

                    b.Property<string>("Titre")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titre");

                    b.HasKey("Id")
                        .HasName("PK__Experien__3213E83FDFDF460E");

                    b.HasIndex("IdCondidat");

                    b.HasIndex("IdVille");

                    b.ToTable("Experience", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Formation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("date")
                        .HasColumnName("date_debut");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("date")
                        .HasColumnName("date_fin");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description_");

                    b.Property<string>("Ecole")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ecole");

                    b.Property<int?>("IdCondidat")
                        .HasColumnType("int")
                        .HasColumnName("id_condidat");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("id_ville");

                    b.Property<string>("Niveau")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("niveau");

                    b.HasKey("Id")
                        .HasName("PK__Formatio__3213E83F9AD22692");

                    b.HasIndex("IdCondidat");

                    b.HasIndex("IdVille");

                    b.ToTable("Formation", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Messagerie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateMsg")
                        .HasColumnType("date")
                        .HasColumnName("date_msg");

                    b.Property<int?>("DestinataireId")
                        .HasColumnType("int")
                        .HasColumnName("destinataire_id");

                    b.Property<int?>("ExpediteurId")
                        .HasColumnType("int")
                        .HasColumnName("expediteur_id");

                    b.Property<string>("Msg")
                        .HasColumnType("text")
                        .HasColumnName("msg");

                    b.HasKey("Id")
                        .HasName("PK__Messager__3213E83FB632B91A");

                    b.HasIndex("ExpediteurId");

                    b.ToTable("Messagerie", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.ModeTravail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nom");

                    b.HasKey("Id")
                        .HasName("PK__ModeTrav__3213E83F9D7319CC");

                    b.ToTable("ModeTravail", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Offre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("adresse");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DatePub")
                        .HasColumnType("date")
                        .HasColumnName("date_pub");

                    b.Property<string>("Descrpition")
                        .HasColumnType("text")
                        .HasColumnName("descrpition");

                    b.Property<string>("Dure")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("dure");

                    b.Property<int?>("IdModetravail")
                        .HasColumnType("int")
                        .HasColumnName("id_modetravail");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("id_ville");

                    b.Property<string>("Titre")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titre");

                    b.HasKey("Id")
                        .HasName("PK__Offre__3213E83F208C604A");

                    b.HasIndex("IdModetravail");

                    b.HasIndex("IdVille");

                    b.ToTable("Offre", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Projet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description_");

                    b.Property<int?>("IdCondidat")
                        .HasColumnType("int")
                        .HasColumnName("id_condidat");

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nom");

                    b.HasKey("Id")
                        .HasName("PK__Projet__3213E83FD52ABFF2");

                    b.HasIndex("IdCondidat");

                    b.ToTable("Projet", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Ville", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nom");

                    b.HasKey("Id")
                        .HasName("PK__Ville__3213E83FC203427C");

                    b.ToTable("Ville", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a814423e-0467-40a4-ac00-92feee24cc16",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "11086d24-bd5b-4348-aaf2-2c2f5f11034c",
                            ConcurrencyStamp = "2",
                            Name = "Candidat",
                            NormalizedName = "CANDIDAT"
                        },
                        new
                        {
                            Id = "1ba69201-f7c5-427d-b427-706101443023",
                            ConcurrencyStamp = "3",
                            Name = "Entreprise",
                            NormalizedName = "ENTREPRISE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Freelance.Domain.Entities.CompetenceOffre", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Competence", "IdCompetenceNavigation")
                        .WithMany("CompetenceOffres")
                        .HasForeignKey("IdCompetence")
                        .HasConstraintName("FK__Competenc__id_co__619B8048");

                    b.HasOne("Freelance.Domain.Entities.Offre", "IdOffreNavigation")
                        .WithMany("CompetenceOffres")
                        .HasForeignKey("IdOffre")
                        .HasConstraintName("FK__Competenc__id_Of__628FA481");

                    b.Navigation("IdCompetenceNavigation");

                    b.Navigation("IdOffreNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.ComptenceDmExpertise", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Competence", "IdCompetenceNavigation")
                        .WithMany("ComptenceDmExpertises")
                        .HasForeignKey("IdCompetence")
                        .HasConstraintName("FK__Comptence__id_co__4222D4EF");

                    b.HasOne("Freelance.Domain.Entities.DomaineExpertise", "IdDmexpertiseNavigation")
                        .WithMany("ComptenceDmExpertises")
                        .HasForeignKey("IdDmexpertise")
                        .HasConstraintName("FK__Comptence__id_dm__4316F928");

                    b.Navigation("IdCompetenceNavigation");

                    b.Navigation("IdDmexpertiseNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Condidat", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Ville", "IdVilleNavigation")
                        .WithMany("Condidats")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__Condidat__id_vil__38996AB5");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.CondidatComp", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Competence", "IdCompNavigation")
                        .WithMany("CondidatComps")
                        .HasForeignKey("IdComp")
                        .HasConstraintName("FK__CondidatC__id_co__5070F446");

                    b.HasOne("Freelance.Domain.Entities.Condidat", "IdCondNavigation")
                        .WithMany("CondidatComps")
                        .HasForeignKey("IdCond")
                        .HasConstraintName("FK__CondidatC__id_co__5165187F");

                    b.Navigation("IdCompNavigation");

                    b.Navigation("IdCondNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.ConsultaionProfil", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Condidat", "IdCondidatNavigation")
                        .WithMany("ConsultaionProfils")
                        .HasForeignKey("IdCondidat")
                        .HasConstraintName("FK__Consultai__id_co__5441852A");

                    b.HasOne("Freelance.Domain.Entities.Entreprise", "IdEntrepriseNavigation")
                        .WithMany("ConsultaionProfils")
                        .HasForeignKey("IdEntreprise")
                        .HasConstraintName("FK__Consultai__id_en__5535A963");

                    b.Navigation("IdCondidatNavigation");

                    b.Navigation("IdEntrepriseNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Entreprise", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Ville", "IdVilleNavigation")
                        .WithMany("Entreprises")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__Entrepris__id_vi__3B75D760");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Experience", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Condidat", "IdCondidatNavigation")
                        .WithMany("Experiences")
                        .HasForeignKey("IdCondidat")
                        .HasConstraintName("FK__Experienc__id_co__46E78A0C");

                    b.HasOne("Freelance.Domain.Entities.Ville", "IdVilleNavigation")
                        .WithMany("Experiences")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__Experienc__id_vi__45F365D3");

                    b.Navigation("IdCondidatNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Formation", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Condidat", "IdCondidatNavigation")
                        .WithMany("Formations")
                        .HasForeignKey("IdCondidat")
                        .HasConstraintName("FK__Formation__id_co__4AB81AF0");

                    b.HasOne("Freelance.Domain.Entities.Ville", "IdVilleNavigation")
                        .WithMany("Formations")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__Formation__id_vi__49C3F6B7");

                    b.Navigation("IdCondidatNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Messagerie", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Condidat", "Expediteur")
                        .WithMany("Messageries")
                        .HasForeignKey("ExpediteurId")
                        .HasConstraintName("FK__Messageri__exped__5812160E");

                    b.HasOne("Freelance.Domain.Entities.Entreprise", "ExpediteurNavigation")
                        .WithMany("Messageries")
                        .HasForeignKey("ExpediteurId")
                        .HasConstraintName("FK__Messageri__exped__59063A47");

                    b.Navigation("Expediteur");

                    b.Navigation("ExpediteurNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Offre", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.ModeTravail", "IdModetravailNavigation")
                        .WithMany("Offres")
                        .HasForeignKey("IdModetravail")
                        .HasConstraintName("FK__Offre__id_modetr__5EBF139D");

                    b.HasOne("Freelance.Domain.Entities.Ville", "IdVilleNavigation")
                        .WithMany("Offres")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__Offre__id_ville__5DCAEF64");

                    b.Navigation("IdModetravailNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Projet", b =>
                {
                    b.HasOne("Freelance.Domain.Entities.Condidat", "IdCondidatNavigation")
                        .WithMany("Projets")
                        .HasForeignKey("IdCondidat")
                        .HasConstraintName("FK__Projet__id_condi__4D94879B");

                    b.Navigation("IdCondidatNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Competence", b =>
                {
                    b.Navigation("CompetenceOffres");

                    b.Navigation("ComptenceDmExpertises");

                    b.Navigation("CondidatComps");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Condidat", b =>
                {
                    b.Navigation("CondidatComps");

                    b.Navigation("ConsultaionProfils");

                    b.Navigation("Experiences");

                    b.Navigation("Formations");

                    b.Navigation("Messageries");

                    b.Navigation("Projets");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.DomaineExpertise", b =>
                {
                    b.Navigation("ComptenceDmExpertises");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Entreprise", b =>
                {
                    b.Navigation("ConsultaionProfils");

                    b.Navigation("Messageries");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.ModeTravail", b =>
                {
                    b.Navigation("Offres");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Offre", b =>
                {
                    b.Navigation("CompetenceOffres");
                });

            modelBuilder.Entity("Freelance.Domain.Entities.Ville", b =>
                {
                    b.Navigation("Condidats");

                    b.Navigation("Entreprises");

                    b.Navigation("Experiences");

                    b.Navigation("Formations");

                    b.Navigation("Offres");
                });
#pragma warning restore 612, 618
        }
    }
}
